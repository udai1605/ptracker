{"version":3,"file":"static/js/758.1e8fd323.chunk.js","mappings":"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","sources":["common/InputTextField.js","common/Formators.js","common/MobileDatePicker.js","common/ptimeForm.js","components/PtimeForm.js","containers/AddPtime.js","utils/api/parttimeAPI.js","store/actions/CompanyActions.js"],"sourcesContent":["import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\n\r\nexport const InputTextField = ({ form, field, ...props }) => {\r\n    const { name, value = '' } = field;\r\n    const { handleChange, handleBlur } = form;\r\n    const { label, required, multiline, placeholder, type, size = \"small\", fullWidth = true, helperText, error, className, disabled, inputProps } = props;\r\n\r\n    return (\r\n        <TextField\r\n            id={name}\r\n            name={name}\r\n            value={value}\r\n            label={label}\r\n            error={!!error}\r\n            className={className}\r\n            helperText={error ? error : helperText}\r\n            required={required}\r\n            multiline={multiline}\r\n            rows={multiline && 3}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            fullWidth={fullWidth}\r\n            size={size}\r\n            disabled={disabled}\r\n            variant=\"outlined\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            InputProps={inputProps}\r\n        />\r\n    );\r\n};\r\n","export const formatDate = (date) => {\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const list = {\r\n    January: \"01\",\r\n    February: \"02\",\r\n    March: \"03\",\r\n    April: \"04\",\r\n    May: \"05\",\r\n    June: \"06\",\r\n    July: \"07\",\r\n    August: \"08\",\r\n    September: \"09\",\r\n    October: \"10\",\r\n    November: \"11\",\r\n    December: \"12\",\r\n  };\r\n  let d = new Date(date),\r\n    month = \"\" + d.getMonth(),\r\n    day = \"\" + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n  // if(month.length<2) month= \"0\" + month;\r\n  const monthIndex = list[months[month]];\r\n  if (day.length < 2) day = \"0\" + day;\r\n\r\n  return [day, months[month], year, monthIndex];\r\n};\r\n","import { useState } from \"react\";\r\nimport { TextField, InputAdornment, Button } from \"@mui/material\";\r\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { formatDate } from \"../common/Formators\";\r\n\r\n// const Wrapper = styled(\"div\")(({ theme }) => ({\r\n//   [theme.breakpoints.up(\"sm\")]: {\r\n//     display: \"none\",\r\n//   },\r\n// }));\r\n\r\nexport default function MobDatePicker({\r\n  name,\r\n  setFormikFieldvalue,\r\n  handleDateGap,\r\n  label,\r\n  currvalue,\r\n  views = [\"year\", \"month\", \"day\"],\r\n  inputFormat = \"MM/dd/yyyy\",\r\n  required,\r\n  error,\r\n  endAdornmentRequired = false,\r\n  maxDate = new Date(),\r\n  minDate = undefined,\r\n}) {\r\n  const [value, setValue] = useState(currvalue ? new Date(currvalue) : null);\r\n  const [presentClicked, setPresentClicked] = useState(false);\r\n  const handleChange = (newValue) => {\r\n    const d = formatDate(newValue);\r\n    // console.log(d)\r\n    let date = `${d[3]}-01-${d[2]}`;\r\n    if (views.includes(\"day\")) {\r\n      date = `${d[3]}-${d[0]}-${d[2]}`;\r\n    }\r\n    setValue(newValue);\r\n    setFormikFieldvalue(name, date);\r\n    setPresentClicked(false);\r\n  };\r\n\r\n  return (\r\n    // <Wrapper>\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DatePicker\r\n        InputAdornmentProps={{ position: \"start\" }}\r\n        InputProps={{\r\n          endAdornment: endAdornmentRequired ? (\r\n            <InputAdornment position=\"end\">\r\n              {value ? (\r\n                <Button\r\n                  onClick={() => {\r\n                    setValue(null);\r\n                  }}\r\n                >\r\n                  Present\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  onClick={() => {\r\n                    setValue(\"\");\r\n                  }}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              )}\r\n            </InputAdornment>\r\n          ) : null,\r\n        }}\r\n        label={label}\r\n        views={views}\r\n        sx={{ width: \"100%\" }}\r\n        inputFormat={inputFormat}\r\n        size=\"small\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        maxDate={maxDate}\r\n        minDate={minDate}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            size=\"large\"\r\n            required={required}\r\n            error={error}\r\n            helperText={error}\r\n            fullWidth\r\n            {...params}\r\n          />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n    // </Wrapper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { Grid, Button } from \"@mui/material\";\r\nimport { InputTextField } from \"../common/InputTextField\";\r\nimport * as Yup from \"yup\";\r\nimport MobileDatePicker from \"../common/MobileDatePicker\";\r\nconst ptimeForm = (props) => {\r\n  const FormValidationSchema = Yup.object({\r\n    companyName: Yup.string().required(\"Company name is required\"),\r\n    payRate: Yup.string().required(\"Pay rate is required\"),\r\n    startDate: Yup.string().required(\"Start date is required\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={props.initialState}\r\n      validationSchema={FormValidationSchema}\r\n      onSubmit={(values, { setFieldValue }) => {\r\n        props?.handleSubmit(values);\r\n      }}\r\n    >\r\n      {({ values, setFieldValue, touched, errors }) => {\r\n        return (\r\n          <Form>\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              mt={1}\r\n              sx={{\r\n                width: \"100%\",\r\n                border: \"1px solid lightgrey\",\r\n                borderRadius: \"5px\",\r\n                padding: \"1rem 1rem 1rem 0\",\r\n                marginLeft: \"0\",\r\n              }}\r\n            >\r\n              <Grid item md={12} xs={12} sx={{ marginTop: \"-1rem\" }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={12}>\r\n                    <Field\r\n                      name={`companyName`}\r\n                      value={`${values.companyName}`}\r\n                      label=\"Company Name\"\r\n                      placeholder=\"Company Name\"\r\n                      required\r\n                      component={InputTextField}\r\n                      //error={\r\n                      //touchedItems?.apartmentUnitHouseNumber &&\r\n                      //ADDRESS_DETAILS?.apartmentUnitHouseNumber\r\n                      //}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} md={12}>\r\n                    <Field\r\n                      name={`payRate`}\r\n                      value={`${values.payRate}`}\r\n                      required\r\n                      label=\"Pay Rate\"\r\n                      placeholder=\"Pay Rate\"\r\n                      component={InputTextField}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} md={12}>\r\n                    <MobileDatePicker\r\n                      views={[\"year\", \"month\", \"day\"]}\r\n                      inputFormat=\"MM/dd/yyyy\"\r\n                      name={`startDate`}\r\n                      currvalue={`${values.startDate}`}\r\n                      label=\"Joining Date\"\r\n                      setFormikFieldvalue={setFieldValue}\r\n                      required={true}\r\n                      endAdornmentRequired={true}\r\n                      maxDate={new Date()}\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    md={12}\r\n                    sx={{ display: \"flex\", justifyContent: \"center\" }}\r\n                  >\r\n                    <Button\r\n                      sx={{\r\n                        width: \"200px\",\r\n                        height: \"39px\",\r\n                      }}\r\n                      variant=\"contained\"\r\n                      type=\"submit\"\r\n                    >\r\n                      {props.label}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>{\" \"}\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ptimeForm;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport StorefrontIcon from \"@mui/icons-material/Storefront\";\r\nimport PtimeSubForm from \"../common/ptimeForm\";\r\nconst initialState = {\r\n  companyName: \"\",\r\n  payRate: \"\",\r\n  startDate: \"\",\r\n};\r\n\r\nconst PtimeForm = (props) => {\r\n  const handleSubmit = (data) => {\r\n    props?.handlePtimeAdd(data);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={12}\r\n          sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => props.navigate(\"/plist\")}\r\n            startIcon={<StorefrontIcon />}\r\n          >\r\n            View all\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <PtimeSubForm handleSubmit={handleSubmit} initialState={initialState} label=\"Add\"/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PtimeForm;\r\n","import React from \"react\";\r\nimport PtimeForm from \"../components/PtimeForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { addnewParttime } from \"../store/actions/CompanyActions\";\r\nconst AddPtime = (props) => {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const handlePtimeAdd = async (params) => {\r\n    if (params != null) {\r\n      try {\r\n        const data = { ...params, userId: props?.userData?.loginData?.user_id };\r\n        //console.log(data,props?.userData?.loginData)\r\n        const res = await props.addnewParttime(data);\r\n        enqueueSnackbar(\"Parttime added Successful\", { variant: \"success\" });\r\n      } catch (err) {\r\n        console.log(err);\r\n        enqueueSnackbar(err, { variant: \"error\" });\r\n      }\r\n    }\r\n  };\r\n  return <PtimeForm navigate={navigate} handlePtimeAdd={handlePtimeAdd} />;\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userData: state.LoginReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addnewParttime: (params) => dispatch(addnewParttime(params)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPtime);\r\n","import axios from \"axios\";\r\nimport { serverAddress } from \"../../constants.js\";\r\n\r\nconst api = {\r\n  addnewParttime: (params) => {\r\n    if (params !== undefined) {\r\n      let url = serverAddress + \"/api/part/add\";\r\n      return axios.post(url, params);\r\n    }\r\n  },\r\n  getallParttime: (params) => {\r\n    if (params !== undefined) {\r\n      let url = serverAddress + `/api/part/all/${params.userId}`;\r\n      return axios.get(url);\r\n    }\r\n  },\r\n  updateParttime: (params) => {\r\n    if (params !== undefined) {\r\n      let url = serverAddress + `/api/part/update/${params.id}`;\r\n      return axios.put(url, params);\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;\r\n","import * as types from \"../../constants\";\r\nimport parttimeAPI from \"../../utils/api/parttimeAPI\";\r\n\r\nexport function addnewParttime(params) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: types.CREATE_NEW_PARTTIME_PENDING, // Dispatch the pending action\r\n    });\r\n    try {\r\n      const response = await parttimeAPI.addnewParttime(params);\r\n      dispatch({\r\n        type: types.CREATE_NEW_PARTTIME_FULFILLED,\r\n        payload: response.data,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: types.CREATE_NEW_PARTTIME_REJECTED,\r\n        payload: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nexport function getallParttime(params) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: types.GET_ALL_PARTTIME_PENDING, // Dispatch the pending action\r\n    });\r\n    try {\r\n      const response = await parttimeAPI.getallParttime(params);\r\n      dispatch({\r\n        type: types.GET_ALL_PARTTIME_FULFILLED,\r\n        payload: response.data,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: types.GET_ALL_PARTTIME_REJECTED,\r\n        payload: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nexport function updateParttime(params) {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: types.UPDATE_PARTTIME_PENDING, // Dispatch the pending action\r\n    });\r\n    try {\r\n      const response = await parttimeAPI.updateParttime(params);\r\n      dispatch({\r\n        type: types.UPDATE_PARTTIME_FULFILLED,\r\n        payload: response.data,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: types.UPDATE_PARTTIME_REJECTED,\r\n        payload: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n}"],"names":["InputTextField","_ref","form","field","props","_objectWithoutProperties","_excluded","name","_field$value","value","handleChange","handleBlur","label","required","multiline","placeholder","type","_props$size","size","_props$fullWidth","fullWidth","helperText","error","className","disabled","inputProps","_jsx","TextField","id","rows","variant","onChange","onBlur","InputProps","formatDate","date","months","d","Date","month","getMonth","day","getDate","year","getFullYear","monthIndex","January","February","March","April","May","June","July","August","September","October","November","December","length","MobDatePicker","setFormikFieldvalue","handleDateGap","currvalue","_ref$views","views","_ref$inputFormat","inputFormat","_ref$endAdornmentRequ","endAdornmentRequired","_ref$maxDate","maxDate","_ref$minDate","minDate","undefined","_useState","useState","_useState2","_slicedToArray","setValue","_useState3","_useState4","setPresentClicked","LocalizationProvider","dateAdapter","AdapterDateFns","children","DatePicker","InputAdornmentProps","position","endAdornment","InputAdornment","Button","onClick","sx","width","newValue","concat","includes","renderInput","params","_objectSpread","FormValidationSchema","Yup","companyName","payRate","startDate","Formik","initialValues","initialState","validationSchema","onSubmit","values","setFieldValue","handleSubmit","_ref2","touched","errors","_jsxs","Form","Grid","container","spacing","mt","border","borderRadius","padding","marginLeft","item","md","xs","marginTop","Field","component","MobileDatePicker","display","justifyContent","height","_Fragment","marginBottom","color","navigate","startIcon","StorefrontIcon","PtimeSubForm","data","handlePtimeAdd","connect","state","userData","LoginReducer","dispatch","addnewParttime","useNavigate","enqueueSnackbar","useSnackbar","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_props$userData","_props$userData$login","wrap","_context","prev","next","userId","loginData","user_id","sent","t0","console","log","stop","_x","apply","arguments","PtimeForm","url","serverAddress","axios","post","getallParttime","get","updateParttime","put","response","types","parttimeAPI","payload","abrupt","message","_callee2","_context2","_x2","_ref3","_callee3","_context3","_x3"],"sourceRoot":""}