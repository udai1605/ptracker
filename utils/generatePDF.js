
// const generatePDF = (data, outputPath) => {
//   return new Promise((resolve, reject) => {
//     const doc = new PDFDocument();
//     const stream = fs.createWriteStream(outputPath);
//     doc.pipe(stream);

//     // Header
//     doc.fontSize(20).text('Shift Report', { align: 'center' });
//     doc.moveDown();

//     // Date Row
//     doc.fontSize(12).text('From:', { continued: true });
//     doc.text(data?.startDate || data?.shifts[data?.shifts?.length - 1].date, { align: 'left' });
//     doc.text('To:', { continued: true });
//     doc.text(data?.endDate || data?.shifts[0].date, { align: 'left' });
//     doc.moveDown();

//     // Table Header
//     doc.fontSize(12);
//     const tableHeaders = ['Date', 'Location', 'Start Time', 'End Time', 'Shift Hours'];
//     tableHeaders.forEach(header => {
//       doc.text(header, { continued: true });
//     });
//     doc.moveDown();

//     // Table Rows
//     data?.shifts.forEach(shift => {
//       doc.fontSize(12);
//       doc.text(new Date(shift?.date).toLocaleDateString(), { continued: true });
//       doc.text(shift?.location, { continued: true });
//       doc.text(shift?.start_time, { continued: true });
//       doc.text(shift?.end_time, { continued: true });
//       doc.text(shift?.shift_hours.toString());
//       doc.moveDown();
//     });

//     // Footer
//     doc.fontSize(10).text('Generated by PTracker', { align: 'center' });

//     doc.end();

//     stream.on('finish', () => resolve(outputPath));
//     stream.on('error', reject);
//   });
// };

// module.exports = generatePDF;

const fs = require("fs");
const PDFDocument = require("pdfkit");

const createInvoice = (data, outputPath) => {
  console.log(data.companyFilter)
  return new Promise(async (resolve, reject) => {
    let doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);
    await generateHeader(doc);
    await generateCustomerInformation(doc, data);
    await generateInvoiceTable(doc, data);
    await generateFooter(doc);

    doc.end();
    stream.on('finish', () => resolve(outputPath));
    stream.on('error', reject);


    function generateHeader(doc) {
      doc
        .image("assets/img/logo.png", 50, 45, { width: 60 })
        .fillColor("#444444")
        .fontSize(20)
        .text("PTracker", 110, 57)
        .fontSize(10)
        // .text("ACME Inc.", 200, 50, { align: "right" })
        // .text("123 Main Street", 200, 65, { align: "right" })
        // .text("New York, NY, 10025", 200, 80, { align: "right" })
        .moveDown();
    }

    function generateCustomerInformation(doc, data) {
      doc
        .fillColor("#444444")
        .fontSize(20)
        .text("Shift Report", 50, 160);

      generateHr(doc, 185);

      const customerInformationTop = 200;

      doc
        .fontSize(10)
        .text(`${data?.companyFilter ? "Company Name:" : ""}`, 50, customerInformationTop)
        .font("Helvetica-Bold")
        .text(`${data?.companyFilter ? data?.shifts[0]?.part_time_name : ""}`, 150, customerInformationTop)
        .font("Helvetica")
        .text("Start Date:", 50, data?.companyFilter ? customerInformationTop + 15 : customerInformationTop)
        .text(formatDate(data?.startDate || data?.shifts[data?.shifts?.length - 1].date), 150, data?.companyFilter ? customerInformationTop + 15 : customerInformationTop)
        .text("Total Hours:", 50, data?.companyFilter ? customerInformationTop + 30 : customerInformationTop + 15)
        .text(
          data?.totalHours,
          150,
          data?.companyFilter ? customerInformationTop + 30 : customerInformationTop + 15
        )

        .font("Helvetica-Bold")
        .text("", 300, customerInformationTop)
        .font("Helvetica")
        .text("End Date:", 300, data?.companyFilter ? customerInformationTop + 15 : customerInformationTop)
        .text(formatDate(data?.endDate || data?.shifts[0].date), 400, data?.companyFilter ? customerInformationTop + 15 : customerInformationTop)
        .text(
          "",
          300,
          data?.companyFilter ? customerInformationTop + 30 : customerInformationTop + 15
        )
        .moveDown();

      generateHr(doc, 252);
    }

    function generateInvoiceTable(doc, data) {
      let i = 0;
      const invoiceTableTop = 330;

      doc.font("Helvetica-Bold");
      data?.companyFilter ? generateTableRow(
        doc,
        invoiceTableTop,
        "Date",
        "Location",
        "Start Time",
        "End Time",
        "Shift Hours",
        "Shift Pay"
      ) : generateNonFilterTableRow(
        doc,
        invoiceTableTop,
        "Date",
        "Company Name",
        "Location",
        "Start Time",
        "End Time",
        "Shift Hours",
        "Shift Pay"
      )
      generateHr(doc, invoiceTableTop + 20);
      doc.font("Helvetica");
      data?.shifts.forEach((shift, index) => {
        i = index
        const position = invoiceTableTop + (index + 1) * 30;
        data?.companyFilter ? generateTableRow(
          doc,
          position,
          new Date(shift?.date).toLocaleDateString(),
          shift?.location,
          formatTime(shift?.start_time),
          formatTime(shift?.end_time),
          shift?.shift_hours.toString(),
          `$ ${shift?.shift_hours * shift?.pay_per_hour}`
        ) : generateNonFilterTableRow(
          doc,
          position,
          new Date(shift?.date).toLocaleDateString(),
          shift?.part_time_name,
          shift?.location,
          formatTime(shift?.start_time),
          formatTime(shift?.end_time),
          shift?.shift_hours.toString(),
          `$ ${shift?.shift_hours * shift?.pay_per_hour}`
        )

        generateHr(doc, position + 20);
      })
      console.log(i)
      const subtotalPosition = invoiceTableTop + (i + 2) * 30;
      data?.companyFilter ? generateTableRow(
        doc,
        subtotalPosition,
        "",
        "",
        "Total Hours",
        "",
        data?.totalHours
      ) : generateNonFilterTableRow(
        doc,
        subtotalPosition,
        "",
        "",
        "",
        "Total Hours",
        "",
        data?.totalHours
      )

      const paidToDatePosition = subtotalPosition + 20;
      // generateTableRow(
      //   doc,
      //   paidToDatePosition,
      //   "",
      //   "",
      //   "Pay per Hour",
      //   "",
      //   data?.pay_per_hour
      // );

      const duePosition = subtotalPosition + 25;
      doc.font("Helvetica-Bold");
      data?.companyFilter ? generateTableRow(
        doc,
        duePosition,
        "",
        "",
        "Expected Salary",
        "",
        "",
        `$ ${data?.totalPay}`
      ) : generateNonFilterTableRow(
        doc,
        duePosition,
        "",
        "",
        "",
        "Expected Salary",
        "",
        "",
        `$ ${data?.totalPay}`
      )
      doc.font("Helvetica");
    }

    function generateFooter(doc) {
      doc
        .fontSize(10)
        .text(
          "Generated Using PTracker. Designed and developed by Udaikiran.",
          50,
          780,
          { align: "center", link: 'https://ptracker.onrender.com/', width: 500 }
        );
    }

    function generateTableRow(
      doc,
      y,
      item,
      description,
      unitCost,
      quantity,
      lineTotal,
      payTotal,
    ) {
      // console.log(
      //   y,
      //   item,
      //   description,
      //   unitCost,
      //   quantity,
      //   lineTotal, payTotal)
      doc
        .fontSize(10)
        .text(item, 50, y)
        .text(description, 120, y)
        .text(unitCost, 240, y, { width: 90, align: "right" })
        .text(quantity, 330, y, { width: 90, align: "right" })
        .text(lineTotal, 395, y, { width: 90, align: "right" })
        .text(payTotal, 0, y, { align: "right" });
    }

    function generateNonFilterTableRow(
      doc,
      y,
      item,
      company,
      description,
      unitCost,
      quantity,
      lineTotal,
      payTotal,
    ) {
      console.log(
        y,
        item,
        company,
        description,
        unitCost,
        quantity,
        lineTotal, payTotal)
      doc
        .fontSize(10)
        .text(item, 50, y)
        .text(company, 110, y)
        .text(description, 200, y)
        .text(unitCost, 290, y, { width: 90, align: "right" })
        .text(quantity, 340, y, { width: 90, align: "right" })
        .text(lineTotal, 400, y, { width: 90, align: "right" })
        .text(payTotal, 0, y, { align: "right" });
    }

    function generateHr(doc, y) {
      doc
        .strokeColor("#aaaaaa")
        .lineWidth(1)
        .moveTo(50, y)
        .lineTo(550, y)
        .stroke();
    }

    function formatCurrency(cents) {
      return "$" + (cents / 100).toFixed(2);
    }
    function formatTime(timeString) {
      const date = new Date(timeString);
      return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    };
    function formatDate(date) {
      date = new Date(date)
      const day = date.getDate();
      const month = date.getMonth() + 1;
      const year = date.getFullYear();

      return year + "/" + month + "/" + day;
    }
  })
}
module.exports = createInvoice
